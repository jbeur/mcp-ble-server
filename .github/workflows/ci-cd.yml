name: MCP BLE Server CI/CD

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test:stable
        env:
          CI: true
          CI_CRITICAL_ONLY: true
          
      - name: Upload coverage reports
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: |
          npm run lint:fix
          npm run lint
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit
        
      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'MCP BLE Server'
          path: '.'
          format: 'HTML'
          out: 'reports'
          
  build:
    name: Build
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: |
          # Run the build script with detailed output
          npm run build --verbose

          # Debug output
          echo "Build completed. Checking dist directory structure:"
          ls -la
          echo "\nContents of dist directory:"
          ls -la dist/
          echo "\nChecking package.json in dist:"
          cat dist/package.json
          echo "\nChecking node_modules in dist:"
          ls -la dist/node_modules || echo "No node_modules directory found in dist"

      - name: Run build verification
        run: npm run build:verify

      - name: Create artifact manifest
        run: |
          {
            echo "MCP BLE Server Build Artifact"
            echo "Build Date: $(date)"
            echo "Git Commit: ${{ github.sha }}"
            echo "Build Number: ${{ github.run_number }}"
            echo "Node.js Version: $(node --version)"
            echo "NPM Version: $(npm --version)"
            echo -e "\nEnvironment:"
            env | grep -v "SECRET\|TOKEN\|PASSWORD\|KEY"
            echo -e "\nContents:"
            ls -laR dist/
          } > dist/manifest.txt

      - name: Prepare artifacts
        run: |
          # Create a tarball of the dist directory
          tar -czf dist.tar.gz dist/

          # Create SHA256 checksum
          sha256sum dist.tar.gz > dist.tar.gz.sha256

          # Verify the tarball
          tar -tzf dist.tar.gz > /dev/null || (echo "Invalid tarball" && exit 1)

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: mcp-ble-server-dist
          path: |
            dist.tar.gz
            dist.tar.gz.sha256
            dist/manifest.txt
          if-no-files-found: error
          retention-days: 7

      - name: Upload dist directory for deployment
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: mcp-ble-server-dist-full
          path: dist/
          if-no-files-found: error
          retention-days: 7
          
  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.alb_dns_name }}
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: mcp-ble-server-dist
          path: dist

      - name: Verify downloaded artifacts
        run: |
          echo "Contents of dist directory after download:"
          ls -la dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"

      - name: Terraform Init
        working-directory: infrastructure/staging
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        id: plan
        working-directory: infrastructure/staging
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        id: deploy
        working-directory: infrastructure/staging
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve tfplan
          echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-staging
          path: infrastructure/staging/tfplan
          if-no-files-found: error
          retention-days: 7

      - name: Deploy Application
        run: |
          # Set up AWS CLI
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

          # Upload application files to S3
          aws s3 sync dist/ s3://staging-mcp-ble-server-assets/

          # Update EC2 instances (using AWS Systems Manager)
          aws ssm send-command \
            --targets "Key=tag:Environment,Values=staging" \
            --document-name "AWS-RunShellScript" \
            --parameters commands=["cd /var/www/mcp-ble-server && aws s3 sync s3://staging-mcp-ble-server-assets/ . && npm ci --production && pm2 reload ecosystem.config.js"]

      - name: Verify deployment
        run: |
          # Wait for ALB target group to be healthy
          aws elbv2 wait target-health-in-service \
            --target-group-arn ${{ secrets.ALB_TARGET_GROUP_ARN }}
            
          # Verify application is responding
          curl -f https://${{ steps.deploy.outputs.alb_dns_name }}/health 